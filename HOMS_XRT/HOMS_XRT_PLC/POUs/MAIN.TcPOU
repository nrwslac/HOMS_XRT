<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="Main" Id="{ea0bf136-bb68-48b6-99e0-4530d55408e2}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Main
VAR
    tpImAPLC : TP := (PT:=T#10S);

    // MR1L3
    // Motors
    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1L3_Yup]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1L3_Yup]^STM Status^Status^Digital input 2;
                              .nRawEncoderULINT:=TIIB[EL5042_M1L3_Yupdwn]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:MMS:YUP
    '}
    //PMPS State Stage; bPowerSelf:=False
    M1 : DUT_MotionStage := (sName:='MR1L3-Coatings', fVelocity:=200.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=FALSE);
    fbMotionStage_m1 : FB_MotionStage;

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1L3_Ydwn]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1L3_Ydwn]^STM Status^Status^Digital input 2'}
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:MMS:YDWN
    '}
    M2 : DUT_MotionStage := (fVelocity:=200.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE);
    fbMotionStage_m2 : FB_MotionStage;

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1L3_Xup]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1L3_Xup]^STM Status^Status^Digital input 2;
                              .nRawEncoderULINT:=TIIB[EL5042_M1L3_Xupdwn]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:MMS:XUP
    '}
    M3 : DUT_MotionStage := (fVelocity:=1000.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE);
    fbMotionStage_m3 : FB_MotionStage;

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1L3_Xdwn]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1L3_Xdwn]^STM Status^Status^Digital input 2'}
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:MMS:XDWN
    '}
    M4 : DUT_MotionStage := (fVelocity:=1000.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE);
    fbMotionStage_m4 : FB_MotionStage;

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1L3_PitchCoarse]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1L3_PitchCoarse]^STM Status^Status^Digital input 2;
                              .nRawEncoderULINT:=TIIB[EL5042_M1L3_PitchBender]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:MMS:PITCH
    '}
    M5 : DUT_MotionStage := (fVelocity:=150.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE); // MR1L3 Pitch Stepper
    fbMotionStage_m5 : FB_MotionStage;

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1L3_Bender]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1L3_Bender]^STM Status^Status^Digital input 2;
                              .nRawEncoderULINT:=TIIB[EL5042_M1L3_PitchBender]^FB Inputs Channel 2^Position'}
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:MMS:BENDER
    '}
    M6 : DUT_MotionStage := (fVelocity:=150.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE); // MR1L3 Bender
    fbMotionStage_m6 : FB_MotionStage;

    {attribute 'TcLinkTo' := '.fbRunHOMS.bSTOEnable1:=TIIB[EL1004_M1L3_STO]^Channel 1^Input;
                              .fbRunHOMS.bSTOEnable2:=TIIB[EL1004_M1L3_STO]^Channel 2^Input;
                              .fbRunHOMS.stYupEnc.Count:=TIIB[EL5042_M1L3_Yupdwn]^FB Inputs Channel 1^Position;
                              .fbRunHOMS.stYdwnEnc.Count:=TIIB[EL5042_M1L3_Yupdwn]^FB Inputs Channel 2^Position;
                              .fbRunHOMS.stXupEnc.Count:=TIIB[EL5042_M1L3_Xupdwn]^FB Inputs Channel 1^Position;
                              .fbRunHOMS.stXdwnEnc.Count:=TIIB[EL5042_M1L3_Xupdwn]^FB Inputs Channel 2^Position'}
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS
    '}
    MR1L3 : DUT_HOMS;
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:STATS
    '}
    fbMR1L3GantryStats : FB_HomsStats;

    // Encoder Arrays/RMS Watch:
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:Y
    '}
    fbYRMSErrorMR1L3 : FB_RMSWatch;
    fMaxYRMSErrorMR1L3 : LREAL;
    fMinYRMSErrorMR1L3 : LREAL;

    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:X
    '}
    fbXRMSErrorMR1L3 : FB_RMSWatch;
    fMaxXRMSErrorMR1L3 : LREAL;
    fMinXRMSErrorMR1L3 : LREAL;

    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:PITCH
    '}
    fbPitchRMSErrorMR1L3 : FB_RMSWatch;
    fMaxPitchRMSErrorMR1L3 : LREAL;
    fMinPitchRMSErrorMR1L3 : LREAL;

    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:BENDER
    '}
    fbBenderRMSErrorMR1L3 : FB_RMSWatch;
    fMaxBenderRMSErrorMR1L3 : LREAL;
    fMinBenderRMSErrorMR1L3 : LREAL;

    // Pitch Control
    fbMR1L3PitchControl : FB_PitchControl;
    bMR1L3PitchDone : BOOL;
    bMR1L3PitchBusy : BOOL;

    // Bender Control
    fbBenderMR1L3 : FB_Bender;

    // Raw Encoder Counts
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:YUP:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntYupMR1L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:YDWN:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntYdwnMR1L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:XUP:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntXupMR1L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:XDWN:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntXdwnMR1L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:PITCH:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntPitchMR1L3 : UDINT;

    // Encoder Reference Values
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:YUP:REF
        field: EGU cnt
        io: i
    '}
    nEncRefYupMR1L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:YDWN:REF
        field: EGU cnt
        io: i
    '}
    nEncRefYdwnMR1L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:XUP:REF
        field: EGU cnt
        io: i
    '}
    nEncRefXupMR1L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:XDWN:REF
        field: EGU cnt
        io: i
    '}
    nEncRefXdwnMR1L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:ENC:PITCH:REF
        field: EGU cnt
        io: i
    '}
    nEncRefPitchMR1L3 : UDINT;
    mcReadParameterPitchMR1L3 : MC_ReadParameter;
    fEncRefPitchMR1L3_urad : LREAL; // Current Pitch encoder offset in urad
    // MR1L4
    // Motors
    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1L4_Yup]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1L4_Yup]^STM Status^Status^Digital input 2;
                              .nRawEncoderULINT:=TIIB[EL5042_M1L4_Yupdwn]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:MMS:YUP
    '}
    M7 : DUT_MotionStage := (fVelocity:=200.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE);
    fbMotionStage_m7 : FB_MotionStage;
    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1L4_Ydwn]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1L4_Ydwn]^STM Status^Status^Digital input 2'}
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:MMS:YDWN
    '}
    M8 : DUT_MotionStage := (fVelocity:=200.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE);
    fbMotionStage_m8 : FB_MotionStage;
    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1L4_Xup]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1L4_Xup]^STM Status^Status^Digital input 2;
                              .nRawEncoderULINT:=TIIB[EL5042_M1L4_Xupdwn]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:MMS:XUP
    '}
    M9 : DUT_MotionStage := (fVelocity:=1000.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE);
    fbMotionStage_m9 : FB_MotionStage;
    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1L4_Xdwn]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1L4_Xdwn]^STM Status^Status^Digital input 2'}
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:MMS:XDWN
    '}
    M10 : DUT_MotionStage := (fVelocity:=1000.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE);
    fbMotionStage_m10 : FB_MotionStage;
    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1L4_PitchCoarse]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1L4_PitchCoarse]^STM Status^Status^Digital input 2;
                              .nRawEncoderULINT:=TIIB[EL5042_M1L4_PitchBender]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:MMS:PITCH
    '}
    M11 : DUT_MotionStage := (fVelocity:=150.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE); // MR1L4 Pitch Stepper
    fbMotionStage_m11 : FB_MotionStage;
    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1L4_Bender]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1L4_Bender]^STM Status^Status^Digital input 2;
                              .nRawEncoderULINT:=TIIB[EL5042_M1L4_PitchBender]^FB Inputs Channel 2^Position'}
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:MMS:BENDER
    '}
    M12 : DUT_MotionStage := (fVelocity:=150.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE); // MR1L4 Bender
    fbMotionStage_m12 : FB_MotionStage;
    {attribute 'TcLinkTo' := '.fbRunHOMS.bSTOEnable1:=TIIB[EL1004_M1L4_STO]^Channel 1^Input;
                              .fbRunHOMS.bSTOEnable2:=TIIB[EL1004_M1L4_STO]^Channel 2^Input;
                              .fbRunHOMS.stYupEnc.Count:=TIIB[EL5042_M1L4_Yupdwn]^FB Inputs Channel 1^Position;
                              .fbRunHOMS.stYdwnEnc.Count:=TIIB[EL5042_M1L4_Yupdwn]^FB Inputs Channel 2^Position;
                              .fbRunHOMS.stXupEnc.Count:=TIIB[EL5042_M1L4_Xupdwn]^FB Inputs Channel 1^Position;
                              .fbRunHOMS.stXdwnEnc.Count:=TIIB[EL5042_M1L4_Xupdwn]^FB Inputs Channel 2^Position'}
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS
    '}
    MR1L4 : DUT_HOMS;
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:STATS
    '}
    fbMR1L4GantryStats : FB_HomsStats;
    // Encoder Arrays/RMS Watch:
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:Y
    '}
    fbYRMSErrorMR1L4 : FB_RMSWatch;
    fMaxYRMSErrorMR1L4 : LREAL;
    fMinYRMSErrorMR1L4 : LREAL;

    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:X
    '}
    fbXRMSErrorMR1L4 : FB_RMSWatch;
    fMaxXRMSErrorMR1L4 : LREAL;
    fMinXRMSErrorMR1L4 : LREAL;

    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:PITCH
    '}
    fbPitchRMSErrorMR1L4 : FB_RMSWatch;
    fMaxPitchRMSErrorMR1L4 : LREAL;
    fMinPitchRMSErrorMR1L4 : LREAL;

    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:BENDER
    '}
    fbBenderRMSErrorMR1L4 : FB_RMSWatch;
    fMaxBenderRMSErrorMR1L4 : LREAL;
    fMinBenderRMSErrorMR1L4 : LREAL;

    // Pitch Control
    fbMR1L4PitchControl : FB_PitchControl;
    bMR1L4PitchDone : BOOL;
    bMR1L4PitchBusy : BOOL;

    // Bender Control
    fbBenderMR1L4 : FB_Bender;

    // Raw Encoder Counts
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:YUP:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntYupMR1L4 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:YDWN:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntYdwnMR1L4 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:XUP:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntXupMR1L4 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:XDWN:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntXdwnMR1L4 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:PITCH:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntPitchMR1L4 : UDINT;

    // Encoder Reference Values
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:YUP:REF
        field: EGU cnt
        io: i
    '}
    nEncRefYupMR1L4 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:YDWN:REF
        field: EGU cnt
        io: i
    '}
    nEncRefYdwnMR1L4 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:XUP:REF
        field: EGU cnt
        io: i
    '}
    nEncRefXupMR1L4 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:XDWN:REF
        field: EGU cnt
        io: i
    '}
    nEncRefXdwnMR1L4 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:ENC:PITCH:REF
        field: EGU cnt
        io: i
    '}
    nEncRefPitchMR1L4 : UDINT;
    mcReadParameterPitchMR1L4 : MC_ReadParameter;
    fEncRefPitchMR1L4_urad : LREAL; // Current Pitch encoder offset in urad

// MR2L3 BECKHOFF
// Motors
    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M2L3_Yup]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M2L3_Yup]^STM Status^Status^Digital input 2';
                              .nRawEncoderULINT:=TIIB[EL5042_M2L3_Yupdwn]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:MMS:YUP
    '}
    M13 : DUT_MotionStage := (fVelocity:=200.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE); // MR2L3 Yup
    fbMotionStage_m13 : FB_MotionStage;


    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M2L3_Ydwn]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M2L3_Ydwn]^STM Status^Status^Digital input 2'}
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:MMS:YDWN
    '}
    M14 : DUT_MotionStage := (fVelocity:=200.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE); // MR2L3 Ydwn
    fbMotionStage_m14 : FB_MotionStage;

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M2L3_Xup]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M2L3_Xup]^STM Status^Status^Digital input 2;
                              .nRawEncoderULINT:=TIIB[EL5042_M2L3_Xupdwn]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:MMS:XUP
    '}
    M15 : DUT_MotionStage := (fVelocity:=1000.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE); // MR2L3 Xup
    fbMotionStage_m15 : FB_MotionStage;

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M2L3_Xdwn]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M2L3_Xdwn]^STM Status^Status^Digital input 2'}
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:MMS:XDWN
    '}
    M16 : DUT_MotionStage := (fVelocity:=1000.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE); // MR2L3 Xdwn
    fbMotionStage_m16 : FB_MotionStage;

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M2L3_PitchCoarse]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M2L3_PitchCoarse]^STM Status^Status^Digital input 2;
                              .nRawEncoderULINT:=TIIB[EL5042_M2L3_PitchBender]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:MMS:PITCH
    '}
    M17 : DUT_MotionStage := (fVelocity:=150.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE); // MR2L3 Pitch Stepper
    fbMotionStage_m17 : FB_MotionStage;
    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M2L3_Bender]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M2L3_Bender]^STM Status^Status^Digital input 2;
                              .nRawEncoderULINT:=TIIB[EL5042_M2L3_PitchBender]^FB Inputs Channel 2^Position'}
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:MMS:BENDER
    '}
    M18 : DUT_MotionStage := (fVelocity:=150.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE); // MR2L3 Bender
    fbMotionStage_m18 : FB_MotionStage;

    {attribute 'TcLinkTo' := '.fbRunHOMS.bSTOEnable1:=TIIB[EL1004_M2L3_STO]^Channel 1^Input;
                              .fbRunHOMS.bSTOEnable2:=TIIB[EL1004_M2L3_STO]^Channel 2^Input;
                              .fbRunHOMS.stYupEnc.Count:=TIIB[EL5042_M2L3_Yupdwn]^FB Inputs Channel 1^Position;
                              .fbRunHOMS.stYdwnEnc.Count:=TIIB[EL5042_M2L3_Yupdwn]^FB Inputs Channel 2^Position;
                              .fbRunHOMS.stXupEnc.Count:=TIIB[EL5042_M2L3_Xupdwn]^FB Inputs Channel 1^Position;
                              .fbRunHOMS.stXdwnEnc.Count:=TIIB[EL5042_M2L3_Xupdwn]^FB Inputs Channel 2^Position'}
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS
    '}
    MR2L3 : DUT_HOMS;
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:STATS
    '}
    fbMR2L3GantryStats : FB_HomsStats;

    // Encoder Arrays/RMS Watch:
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:Y
    '}
    fbYRMSErrorMR2L3 : FB_RMSWatch;
    fMaxYRMSErrorMR2L3 : LREAL;
    fMinYRMSErrorMR2L3 : LREAL;

    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:X
    '}
    fbXRMSErrorMR2L3 : FB_RMSWatch;
    fMaxXRMSErrorMR2L3 : LREAL;
    fMinXRMSErrorMR2L3 : LREAL;

    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:PITCH
    '}
    fbPitchRMSErrorMR2L3 : FB_RMSWatch;
    fMaxPitchRMSErrorMR2L3 : LREAL;
    fMinPitchRMSErrorMR2L3 : LREAL;

    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:BENDER
    '}
    fbBenderRMSErrorMR2L3 : FB_RMSWatch;
    fMaxBenderRMSErrorMR2L3 : LREAL;
    fMinBenderRMSErrorMR2L3 : LREAL;

    // Pitch Control
    fbMR2L3PitchControl : FB_PitchControl;
    bMR2L3PitchDone : BOOL;
    bMR2L3PitchBusy : BOOL;

    // Bender Control
    fbBenderMR2L3 : FB_Bender;

    // Raw Encoder Counts
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:YUP:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntYupMR2L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:YDWN:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntYdwnMR2L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:XUP:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntXupMR2L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:XDWN:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntXdwnMR2L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:PITCH:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntPitchMR2L3 : UDINT;

    // Encoder Reference Values
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:YUP:REF
        field: EGU cnt
        io: i
    '}
    nEncRefYupMR2L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:YDWN:REF
        field: EGU cnt
        io: i
    '}
    nEncRefYdwnMR2L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:XUP:REF
        field: EGU cnt
        io: i
    '}
    nEncRefXupMR2L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:XDWN:REF
        field: EGU cnt
        io: i
    '}
    nEncRefXdwnMR2L3 : UDINT;
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:ENC:PITCH:REF
        field: EGU cnt
        io: i
    '}
    nEncRefPitchMR2L3 : UDINT;
    mcReadParameterPitchMR2L3 : MC_ReadParameter;
    fEncRefPitchMR2L3_urad : LREAL; // Current Pitch encoder offset in urad


    // Common
    fEncLeverArm_mm : LREAL := 513.0;

    // Logging
    fbLogHandler : FB_LogHandler;
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:RTD:1
        field: ASLO 0.1
        field: EGU C
        io: i
    '}
    fM1L3_RTD_1 : REAL;
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:RTD:2
        field: ASLO 0.1
        field: EGU C
        io: i
    '}
    fM1L3_RTD_2 : REAL;
    {attribute 'pytmc' := '
        pv: MR1L3:HOMS:RTD:3
        field: ASLO 0.1
        field: EGU C
        io: i
    '}
    fM1L3_RTD_3 : REAL;
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:RTD:1
        field: ASLO 0.1
        field: EGU C
        io: i
    '}
    fM2L3_RTD_1 : REAL;
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:RTD:2
        field: ASLO 0.1
        field: EGU C
        io: i
    '}
    fM2L3_RTD_2 : REAL;
    {attribute 'pytmc' := '
        pv: MR2L3:HOMS:RTD:3
        field: ASLO 0.1
        field: EGU C
        io: i
    '}
    fM2L3_RTD_3 : REAL;
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:RTD:1
        field: ASLO 0.1
        field: EGU C
        io: i
    '}
    fM1L4_RTD_1 : REAL;
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:RTD:2
        field: ASLO 0.1
        field: EGU C
        io: i
    '}
    fM1L4_RTD_2 : REAL;
    {attribute 'pytmc' := '
        pv: MR1L4:HOMS:RTD:3
        field: ASLO 0.1
        field: EGU C
        io: i
    '}
    fM1L4_RTD_3 : REAL;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// MR1L3 BECKHOFF
MR1L3.fbRunHOMS(stYup:=M1,
               stYdwn:=M2,
               stXup:=M3,
               stXdwn:=M4,
               stPitch:=M5,
               nYupEncRef:=GVL_MR1L3_Constants.nYUP_ENC_REF,
               nYdwnEncRef:=GVL_MR1L3_Constants.nYDWN_ENC_REF,
               nXupEncRef:=GVL_MR1L3_Constants.nXUP_ENC_REF,
               nXdwnEncRef:=GVL_MR1L3_Constants.nXDWN_ENC_REF,
               bExecuteCoupleY:=MR1L3.bExecuteCoupleY,
               bExecuteCoupleX:=MR1L3.bExecuteCoupleX,
               bExecuteDecoupleY:=MR1L3.bExecuteDecoupleY,
               bExecuteDecoupleX:=MR1L3.bExecuteDecoupleX,
               bGantryAlreadyCoupledY=>MR1L3.bGantryAlreadyCoupledY,
               bGantryAlreadyCoupledX=>MR1L3.bGantryAlreadyCoupledX,
               nCurrGantryY=>MR1L3.nCurrGantryY,
               nCurrGantryX=>MR1L3.nCurrGantryX);
fbBenderMR1L3(stBender:=M6,
             bSTOEnable1:=MR1L3.fbRunHOMS.bSTOEnable1,
             bSTOEnable2:=MR1L3.fbRunHOMS.bSTOEnable2);
// No slave motion through Epics
M2.bExecute := FALSE; // MR1L3-Ydwn
M4.bExecute := FALSE; // MR1L3-Xdwn

// Convert nCurrGantry to um (smaller number) to read out in epics
MR1L3.fCurrGantryY_um := LINT_TO_REAL(MR1L3.nCurrGantryY) / 1000.0;
MR1L3.fCurrGantryX_um := LINT_TO_REAL(MR1L3.nCurrGantryX) / 1000.0;

// FB_MotionStage's for non-piezo axes
fbMotionStage_m1(stMotionStage:=M1);
fbMotionStage_m2(stMotionStage:=M2);
fbMotionStage_m3(stMotionStage:=M3);
fbMotionStage_m4(stMotionStage:=M4);
fbMotionStage_m5(stMotionStage:=M5);
fbMotionStage_m6(stMotionStage:=M6);

// Calculate Gantry Stats
fbMR1L3GantryStats(homs:=MR1L3, fbUpStreamY:=M1, fbUpStreamX:=M3);
fbMR1L4GantryStats(homs:=MR1L4, fbUpStreamY:=M7, fbUpStreamX:=M9);
fbMR2L3GantryStats(homs:=MR2L3, fbUpStreamY:=M13, fbUpStreamX:=M15);

// Calculate Pitch RMS Error:
fbYRMSErrorMR1L3(stMotionStage:=M1,
                fMaxRMSError=>fMaxYRMSErrorMR1L3,
                fMinRMSError=>fMinYRMSErrorMR1L3);

fbXRMSErrorMR1L3(stMotionStage:=M3,
                fMaxRMSError=>fMaxXRMSErrorMR1L3,
                fMinRMSError=>fMinXRMSErrorMR1L3);

fbPitchRMSErrorMR1L3(stMotionStage:=M5,
                    fMaxRMSError=>fMaxPitchRMSErrorMR1L3,
                    fMinRMSError=>fMinPitchRMSErrorMR1L3);

fbBenderRMSErrorMR1L3(stMotionStage:=M6,
                     fMaxRMSError=>fMaxBenderRMSErrorMR1L3,
                     fMinRMSError=>fMinBenderRMSErrorMR1L3);
// Pitch Control
//fbMR1L3PitchControl(Pitch:=GVL_M1.MR1L3_Pitch,
                   //Stepper:=M5,
                   //lrCurrentSetpoint:=M5.fPosition,
                   //q_bDone=>bMR1L3PitchDone,
                   //q_bBusy=>bMR1L3PitchBusy);
// When STO hit, need to reset SP
//IF NOT M5.bHardwareEnable THEN
    //M5.fPosition := M5.stAxisStatus.fActPosition;
//END_IF

// Raw Encoder Counts For Epics
nEncCntYupMR1L3 := ULINT_TO_UDINT(MR1L3.fbRunHOMS.stYupEnc.Count);
nEncCntYdwnMR1L3 := ULINT_TO_UDINT(MR1L3.fbRunHOMS.stYdwnEnc.Count);
nEncCntXupMR1L3 := ULINT_TO_UDINT(MR1L3.fbRunHOMS.stXupEnc.Count);
nEncCntXdwnMR1L3 := ULINT_TO_UDINT(MR1L3.fbRunHOMS.stXdwnEnc.Count);
nEncCntPitchMR1L3 := LINT_TO_UDINT(GVL_MR1L3.MR1L3_Pitch.diEncCnt);

// Encoder Reference Values For Epics
nEncRefYupMR1L3 := ULINT_TO_UDINT(GVL_MR1L3_Constants.nYUP_ENC_REF);
nEncRefYdwnMR1L3 := ULINT_TO_UDINT(GVL_MR1L3_Constants.nYDWN_ENC_REF);
nEncRefXupMR1L3 := ULINT_TO_UDINT(GVL_MR1L3_Constants.nXUP_ENC_REF);
nEncRefXdwnMR1L3 := ULINT_TO_UDINT(GVL_MR1L3_Constants.nXDWN_ENC_REF);
mcReadParameterPitchMR1L3(Axis:=M5.Axis,
                         Enable:=TRUE,
                         ParameterNumber:=MC_AxisParameter.AxisEncoderOffset,
                         ReadMode:=READMODE_CYCLIC,
                         Value=>fEncRefPitchMR1L3_urad);

nEncRefPitchMR1L3 := LREAL_TO_UDINT(ABS(fEncRefPitchMR1L3_urad) * fEncLeverArm_mm);

//Beckhoff MR1L4
MR1L4.fbRunHOMS(stYup:=M7,
               stYdwn:=M8,
               stXup:=M9,
               stXdwn:=M10,
               stPitch:=M11,
               nYupEncRef:=GVL_MR1L4_Constants.nYUP_ENC_REF,
               nYdwnEncRef:=GVL_MR1L4_Constants.nYDWN_ENC_REF,
               nXupEncRef:=GVL_MR1L4_Constants.nXUP_ENC_REF,
               nXdwnEncRef:=GVL_MR1L4_Constants.nXDWN_ENC_REF,
               bExecuteCoupleY:=MR1L4.bExecuteCoupleY,
               bExecuteCoupleX:=MR1L4.bExecuteCoupleX,
               bExecuteDecoupleY:=MR1L4.bExecuteDecoupleY,
               bExecuteDecoupleX:=MR1L4.bExecuteDecoupleX,
               bGantryAlreadyCoupledY=>MR1L4.bGantryAlreadyCoupledY,
               bGantryAlreadyCoupledX=>MR1L4.bGantryAlreadyCoupledX,
               nCurrGantryY=>MR1L4.nCurrGantryY,
               nCurrGantryX=>MR1L4.nCurrGantryX);
fbBenderMR1L4(stBender:=M12,
             bSTOEnable1:=MR1L4.fbRunHOMS.bSTOEnable1,
             bSTOEnable2:=MR1L4.fbRunHOMS.bSTOEnable2);
// No slave motion through Epics
M8.bExecute := FALSE; // MR1L3-Ydwn
M10.bExecute := FALSE; // MR1L3-Xdwn

// Convert nCurrGantry to um (smaller number) to read out in epics
MR1L4.fCurrGantryY_um := LINT_TO_REAL(MR1L4.nCurrGantryY) / 1000.0;
MR1L4.fCurrGantryX_um := LINT_TO_REAL(MR1L4.nCurrGantryX) / 1000.0;

// FB_MotionStage's for non-piezo axes
fbMotionStage_m7(stMotionStage:=M7);
fbMotionStage_m8(stMotionStage:=M8);
fbMotionStage_m9(stMotionStage:=M9);
fbMotionStage_m10(stMotionStage:=M10);
fbMotionStage_m11(stMotionStage:=M11);
fbMotionStage_m12(stMotionStage:=M12);

// Calculate Pitch RMS Error:
fbYRMSErrorMR1L4(stMotionStage:=M7,
                fMaxRMSError=>fMaxYRMSErrorMR1L4,
                fMinRMSError=>fMinYRMSErrorMR1L4);

fbXRMSErrorMR1L4(stMotionStage:=M9,
                fMaxRMSError=>fMaxXRMSErrorMR1L4,
                fMinRMSError=>fMinXRMSErrorMR1L4);

fbPitchRMSErrorMR1L4(stMotionStage:=M11,
                    fMaxRMSError=>fMaxPitchRMSErrorMR1L4,
                    fMinRMSError=>fMinPitchRMSErrorMR1L4);

fbBenderRMSErrorMR1L4(stMotionStage:=M12,
                     fMaxRMSError=>fMaxBenderRMSErrorMR1L4,
                     fMinRMSError=>fMinBenderRMSErrorMR1L4);
// Pitch Control
//fbMR1L4PitchControl(Pitch:=GVL_M1L4.MR1L4_Pitch,
                   //Stepper:=M11,
                   //lrCurrentSetpoint:=M11.fPosition,
                   //q_bDone=>bMR1L4PitchDone,
                   //q_bBusy=>bMR1L4PitchBusy);
// When STO hit, need to reset SP
//IF NOT M11.bHardwareEnable THEN
    //M11.fPosition := M11.stAxisStatus.fActPosition;
//END_IF

// Raw Encoder Counts For Epics
nEncCntYupMR1L4 := ULINT_TO_UDINT(MR1L4.fbRunHOMS.stYupEnc.Count);
nEncCntYdwnMR1L4 := ULINT_TO_UDINT(MR1L4.fbRunHOMS.stYdwnEnc.Count);
nEncCntXupMR1L4 := ULINT_TO_UDINT(MR1L4.fbRunHOMS.stXupEnc.Count);
nEncCntXdwnMR1L4 := ULINT_TO_UDINT(MR1L4.fbRunHOMS.stXdwnEnc.Count);
nEncCntPitchMR1L4 := LINT_TO_UDINT(GVL_MR1L4.MR1L4_Pitch.diEncCnt);

// Encoder Reference Values For Epics
nEncRefYupMR1L4 := ULINT_TO_UDINT(GVL_MR1L4_Constants.nYUP_ENC_REF);
nEncRefYdwnMR1L4 := ULINT_TO_UDINT(GVL_MR1L4_Constants.nYDWN_ENC_REF);
nEncRefXupMR1L4 := ULINT_TO_UDINT(GVL_MR1L4_Constants.nXUP_ENC_REF);
nEncRefXdwnMR1L4 := ULINT_TO_UDINT(GVL_MR1L4_Constants.nXDWN_ENC_REF);

mcReadParameterPitchMR1L4(Axis:=M11.Axis,
                         Enable:=TRUE,
                         ParameterNumber:=MC_AxisParameter.AxisEncoderOffset,
                         ReadMode:=READMODE_CYCLIC,
                         Value=>fEncRefPitchMR1L4_urad);

nEncRefPitchMR1L4 := LREAL_TO_UDINT(ABS(fEncRefPitchMR1L4_urad) * fEncLeverArm_mm);

//Beckhoff MR2L3
// MR2L3
MR2L3.fbRunHOMS(stYup:=M13,
               stYdwn:=M14,
               stXup:=M15,
               stXdwn:=M16,
               stPitch:=M17,
               nYupEncRef:=GVL_MR2L3_Constants.nYUP_ENC_REF,
               nYdwnEncRef:=GVL_MR2L3_Constants.nYDWN_ENC_REF,
               nXupEncRef:=GVL_MR2L3_Constants.nXUP_ENC_REF,
               nXdwnEncRef:=GVL_MR2L3_Constants.nXDWN_ENC_REF,
               bExecuteCoupleY:=MR2L3.bExecuteCoupleY,
               bExecuteCoupleX:=MR2L3.bExecuteCoupleX,
               bExecuteDecoupleY:=MR2L3.bExecuteDecoupleY,
               bExecuteDecoupleX:=MR2L3.bExecuteDecoupleX,
               bGantryAlreadyCoupledY=>MR2L3.bGantryAlreadyCoupledY,
               bGantryAlreadyCoupledX=>MR2L3.bGantryAlreadyCoupledX,
               nCurrGantryY=>MR2L3.nCurrGantryY,
               nCurrGantryX=>MR2L3.nCurrGantryX);
fbBenderMR2L3(stBender:=M18,
             bSTOEnable1:=MR2L3.fbRunHOMS.bSTOEnable1,
             bSTOEnable2:=MR2L3.fbRunHOMS.bSTOEnable2);
// No slave motion through Epics
M14.bExecute := FALSE; // MR2L3-Ydwn
M16.bExecute := FALSE; // MR2L3-Xdwn

// Convert nCurrGantry to um (smaller number) to read out in epics
MR2L3.fCurrGantryY_um := LINT_TO_REAL(MR2L3.nCurrGantryY) / 1000;
MR2L3.fCurrGantryX_um := LINT_TO_REAL(MR2L3.nCurrGantryX) / 1000;

// FB_MotionStage's for non-piezo axes
fbMotionStage_m13(stMotionStage:=M13);
fbMotionStage_m14(stMotionStage:=M14);
fbMotionStage_m15(stMotionStage:=M15);
fbMotionStage_m16(stMotionStage:=M16);
fbMotionStage_m17(stMotionStage:=M17);
fbMotionStage_m18(stMotionStage:=M18);

// Calculate RMS Error:
fbYRMSErrorMR2L3(stMotionStage:=M13,
                fMaxRMSError=>fMaxYRMSErrorMR2L3,
                fMinRMSError=>fMinYRMSErrorMR2L3);

fbXRMSErrorMR2L3(stMotionStage:=M15,
                fMaxRMSError=>fMaxXRMSErrorMR2L3,
                fMinRMSError=>fMinXRMSErrorMR2L3);

fbPitchRMSErrorMR2L3(stMotionStage:=M17,
                    fMaxRMSError=>fMaxPitchRMSErrorMR2L3,
                    fMinRMSError=>fMinPitchRMSErrorMR2L3);

fbBenderRMSErrorMR2L3(stMotionStage:=M18,
                     fMaxRMSError=>fMaxBenderRMSErrorMR2L3,
                     fMinRMSError=>fMinBenderRMSErrorMR2L3);

// Pitch Control
//fbMR2L3PitchControl(Pitch:=GVL_MR2L3.MR2L3_Pitch,
                   //Stepper:=M17,
                   //lrCurrentSetpoint:=M17.fPosition,
                   //q_bDone=>bMR2L3PitchDone,
                   //q_bBusy=>bMR2L3PitchBusy);
// When STO hit, need to reset SP
//IF NOT M17.bHardwareEnable THEN
    //M17.fPosition := M17.stAxisStatus.fActPosition;
//END_IF

// Raw Encoder Counts For Epics
nEncCntYupMR2L3 := ULINT_TO_UDINT(MR2L3.fbRunHOMS.stYupEnc.Count);
nEncCntYdwnMR2L3 := ULINT_TO_UDINT(MR2L3.fbRunHOMS.stYdwnEnc.Count);
nEncCntXupMR2L3 := ULINT_TO_UDINT(MR2L3.fbRunHOMS.stXupEnc.Count);
nEncCntXdwnMR2L3 := ULINT_TO_UDINT(MR2L3.fbRunHOMS.stXdwnEnc.Count);
nEncCntPitchMR2L3 := LINT_TO_UDINT(GVL_MR2L3.MR2L3_Pitch.diEncCnt);

// Encoder Reference Values For Epics
nEncRefYupMR2L3 := ULINT_TO_UDINT(GVL_MR2L3_Constants.nYUP_ENC_REF);
nEncRefYdwnMR2L3 := ULINT_TO_UDINT(GVL_MR2L3_Constants.nYDWN_ENC_REF);
nEncRefXupMR2L3 := ULINT_TO_UDINT(GVL_MR2L3_Constants.nXUP_ENC_REF);
nEncRefXdwnMR2L3 := ULINT_TO_UDINT(GVL_MR2L3_Constants.nXDWN_ENC_REF);
mcReadParameterPitchMR2L3(Axis:=M17.Axis,
                         Enable:=TRUE,
                         ParameterNumber:=MC_AxisParameter.AxisEncoderOffset,
                         ReadMode:=READMODE_CYCLIC,
                         Value=>fEncRefPitchMR2L3_urad);

nEncRefPitchMR2L3 := LREAL_TO_UDINT(ABS(fEncRefPitchMR2L3_urad) * fEncLeverArm_mm);

bXRT_M2_IN  := Main.MR1L4.fbRunHOMS.stXupEnc.Count < 25490840;
bXRT_M2_OUT := not bXRT_M2_IN;
//States
PRG_States();
//PMPS
PRG_CoatingProtection();
PRG_PMPS();

// Logging
fbLogHandler();

fM1L3_RTD_1 := INT_TO_REAL(GVL_RTDS.nM1L3_RTD_1);
fM1L3_RTD_2 := INT_TO_REAL(GVL_RTDS.nM1L3_RTD_2);
fM1L3_RTD_3 := INT_TO_REAL(GVL_RTDS.nM1L3_RTD_3);

fM2L3_RTD_1 := INT_TO_REAL(GVL_RTDS.nM2L3_RTD_1);
fM2L3_RTD_2 := INT_TO_REAL(GVL_RTDS.nM2L3_RTD_2);
fM2L3_RTD_3 := INT_TO_REAL(GVL_RTDS.nM2L3_RTD_3);

fM1L4_RTD_1 := INT_TO_REAL(GVL_RTDS.nM1L4_RTD_1);
fM1L4_RTD_2 := INT_TO_REAL(GVL_RTDS.nM1L4_RTD_2);
fM1L4_RTD_3 := INT_TO_REAL(GVL_RTDS.nM1L4_RTD_3);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>